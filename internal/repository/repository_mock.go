// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go
//
// Generated by this command:
//
//	mockgen -source repo.go -destination repository_mock.go -package repository
//
// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	models "finalAssing/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepoInterface is a mock of RepoInterface interface.
type MockRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepoInterfaceMockRecorder
}

// MockRepoInterfaceMockRecorder is the mock recorder for MockRepoInterface.
type MockRepoInterfaceMockRecorder struct {
	mock *MockRepoInterface
}

// NewMockRepoInterface creates a new mock instance.
func NewMockRepoInterface(ctrl *gomock.Controller) *MockRepoInterface {
	mock := &MockRepoInterface{ctrl: ctrl}
	mock.recorder = &MockRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoInterface) EXPECT() *MockRepoInterfaceMockRecorder {
	return m.recorder
}

// GetJobRequirment mocks base method.
func (m *MockRepoInterface) GetJobRequirment(jobId uint) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRequirment", jobId)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobRequirment indicates an expected call of GetJobRequirment.
func (mr *MockRepoInterfaceMockRecorder) GetJobRequirment(jobId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRequirment", reflect.TypeOf((*MockRepoInterface)(nil).GetJobRequirment), jobId)
}

// CheckEmail mocks base method.
func (m *MockRepoInterface) CheckEmail(email, password string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmail", email, password)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmail indicates an expected call of CheckEmail.
func (mr *MockRepoInterfaceMockRecorder) CheckEmail(email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmail", reflect.TypeOf((*MockRepoInterface)(nil).CheckEmail), email, password)
}

// FetchAllCompanies mocks base method.
func (m *MockRepoInterface) FetchAllCompanies(ctx context.Context) ([]models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllCompanies", ctx)
	ret0, _ := ret[0].([]models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllCompanies indicates an expected call of FetchAllCompanies.
func (mr *MockRepoInterfaceMockRecorder) FetchAllCompanies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllCompanies", reflect.TypeOf((*MockRepoInterface)(nil).FetchAllCompanies), ctx)
}

// FetchAllJobs mocks base method.
func (m *MockRepoInterface) FetchAllJobs(ctx context.Context) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllJobs", ctx)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllJobs indicates an expected call of FetchAllJobs.
func (mr *MockRepoInterfaceMockRecorder) FetchAllJobs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllJobs", reflect.TypeOf((*MockRepoInterface)(nil).FetchAllJobs), ctx)
}

// FetchByJobId mocks base method.
func (m *MockRepoInterface) FetchByJobId(ctx context.Context, jobId string) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByJobId", ctx, jobId)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByJobId indicates an expected call of FetchByJobId.
func (mr *MockRepoInterfaceMockRecorder) FetchByJobId(ctx, jobId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByJobId", reflect.TypeOf((*MockRepoInterface)(nil).FetchByJobId), ctx, jobId)
}

// GetCompaniesById mocks base method.
func (m *MockRepoInterface) GetCompaniesById(ctx context.Context, companyId string) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompaniesById", ctx, companyId)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompaniesById indicates an expected call of GetCompaniesById.
func (mr *MockRepoInterfaceMockRecorder) GetCompaniesById(ctx, companyId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompaniesById", reflect.TypeOf((*MockRepoInterface)(nil).GetCompaniesById), ctx, companyId)
}

// GetJobsByCId mocks base method.
func (m *MockRepoInterface) GetJobsByCId(ctx context.Context, companyId string) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobsByCId", ctx, companyId)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobsByCId indicates an expected call of GetJobsByCId.
func (mr *MockRepoInterfaceMockRecorder) GetJobsByCId(ctx, companyId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobsByCId", reflect.TypeOf((*MockRepoInterface)(nil).GetJobsByCId), ctx, companyId)
}

// SaveCompany mocks base method.
func (m *MockRepoInterface) SaveCompany(newComp models.Company) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCompany", newComp)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCompany indicates an expected call of SaveCompany.
func (mr *MockRepoInterfaceMockRecorder) SaveCompany(newComp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCompany", reflect.TypeOf((*MockRepoInterface)(nil).SaveCompany), newComp)
}

// SaveJobsByCompanyId mocks base method.
func (m *MockRepoInterface) SaveJobsByCompanyId(jobs []models.JobReq, compId string) ([]models.JobRespo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveJobsByCompanyId", jobs, compId)
	ret0, _ := ret[0].([]models.JobRespo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveJobsByCompanyId indicates an expected call of SaveJobsByCompanyId.
func (mr *MockRepoInterfaceMockRecorder) SaveJobsByCompanyId(jobs, compId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveJobsByCompanyId", reflect.TypeOf((*MockRepoInterface)(nil).SaveJobsByCompanyId), jobs, compId)
}

// SaveUser mocks base method.
func (m *MockRepoInterface) SaveUser(ctx context.Context, nu models.NewUser) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, nu)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockRepoInterfaceMockRecorder) SaveUser(ctx, nu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockRepoInterface)(nil).SaveUser), ctx, nu)
}
